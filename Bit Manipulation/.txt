Left shift operator(<<)-> multiplying the bit pattern with 2^k
Right shift operator(>>)-> dividing the bit pattern with 2k

__builtin_popcount(x) -> number of 1's in binary of x
__builtin_popcountll(x) -> for long long
__builtin_clz ->  counting the number of leading or trailing zeros in +ve no
__builtin_ctz -> for long longs



count the intersection size in O(1) by using __builtin_popcount(x[i] & x[j])

some functions:
bool isPower2(int x){
     if(x == 0)
            return 0;
    else
    {
        while(x % 2 == 0) x /= 2;
        return (x == 1);
    }
}
bool isPowerOfTwo(int x)
{
    // x will check if x == 0 and !(x & (x - 1)) will check if x is a power of 2 or not
    return (x && !(x & (x - 1)));
}
int count_one_binary_no(int n)
{
    while(n)
    {
        n = n&(n-1);
        count++;
    }
    return count;
}
//generate all the possible subsets of a set 
void possibleSubsets(char A[], int N)
{
    for(int i = 0;i < (1 << N); ++i)
    {
        for(int j = 0;j < N;++j)
            if(i & (1 << j))
                cout << A[j] << ‘ ‘;
        cout << endl;
    }
}
// largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N
long largest_power(long N)
{
    //changing all right side bits to 1.
    N = N| (N>>1);
    N = N| (N>>2);
    N = N| (N>>4);
    N = N| (N>>8);


    //as now the number is 2 * x-1, where x is required answer, so adding 1 & dividing it by 2 
    return (N+1)>>1;
}